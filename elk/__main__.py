import json
import os
from argparse import ArgumentParser
from contextlib import nullcontext, redirect_stdout
from typing import Optional

import torch.distributed as dist
from transformers import AutoConfig, PretrainedConfig

from elk.files import args_to_uuid, elk_cache_dir, get_hiddens_path
from elk.original_runs import run_extraction_origin

from .extraction.extraction_main import run as run_extraction
from .extraction.parser import get_extraction_parser, get_layer_parser
from .training.parser import get_training_parser
from .training.train import train


def run():
    parser = ArgumentParser(add_help=False)
    subparsers = parser.add_subparsers(dest="command", required=True)

    subparsers.add_parser(
        "extract",
        help="Extract hidden states from a model.",
        parents=[get_extraction_parser()],
    )
    subparsers.add_parser(
        "extractorigin",
        help="Extract hidden states from the original models by invoking commands.",
    )
    subparsers.add_parser(
        "train",
        help=(
            "Train a set of ELK probes on hidden states from `elk extract`. "
            "The first argument has to be the name you gave to the extraction."
        ),
        parents=[get_training_parser(), get_layer_parser()],
    )
    subparsers.add_parser(
        "elicit",
        help=(
            "Extract and train a set of ELK probes "
            "on hidden states from `elk extract`. "
        ),
        parents=[get_extraction_parser(), get_training_parser(name=False)],
        conflict_handler="resolve",
    )

    subparsers.add_parser(
        "eval", help="Evaluate a set of ELK probes generated by `elk train`."
    )
    args = parser.parse_args()

    if args.command == "extractorigin":
        run_extraction_origin()
        return

    normalize_args_inplace(args)

    # Support both distributed and non-distributed training
    local_rank = os.environ.get("LOCAL_RANK")
    if local_rank is not None:
        dist.init_process_group("nccl")
        local_rank = int(local_rank)

    # Prevent printing from processes other than the first one
    with redirect_stdout(None) if local_rank != 0 else nullcontext():
        for key in list(vars(args).keys()):
            print("{}: {}".format(key, vars(args)[key]))

        # TODO: Implement the rest of the CLI
        if args.command == "extract":
            run_extraction(args)
        elif args.command == "train":
            train(args)
        elif args.command == "elicit":
            # Extract the hidden states if they're not already there
            args.name = args_to_uuid(args)
            cache_dir = elk_cache_dir() / args.name
            missing_layers = find_missing_layers(args)
            if missing_layers:
                if cache_dir.exists():
                    print(
                        f"Found cache dir \033[1m{cache_dir}\033[0m"
                        f" but it's missing layers {', '.join(missing_layers)}"
                    )

                old_layers = args.layers
                args.layers = missing_layers
                run_extraction(args)
                args.layers = old_layers

                # Ensure the extraction is finished before starting training
                if dist.is_initialized():
                    dist.barrier()

            train(args)
        elif args.command == "eval":
            raise NotImplementedError
        else:
            raise ValueError(f"Unknown command {args.command}")


def normalize_args_inplace(args):
    # Default to CUDA iff available
    if args.device is None:
        import torch

        if not torch.cuda.is_available():
            args.device = "cpu"
        else:
            rank = dist.get_rank() if dist.is_initialized() else 0
            args.device = f"cuda:{rank}"

    if model := getattr(args, "model", None):
        config = AutoConfig.from_pretrained(model)
        assert isinstance(config, PretrainedConfig)

        num_layers = getattr(config, "num_layers", config.num_hidden_layers)
        assert isinstance(num_layers, int)

        if args.layers and args.layer_stride > 1:
            raise ValueError(
                "Cannot use both --layers and --layer-stride. Please use only one."
            )
        elif args.layer_stride > 1:
            # the last layer is often the most interesting
            # layers = [..., num_layers - 1 - layer_stride, num_layers - 1]
            args.layers = list(range(num_layers - 1, -1, -args.layer_stride)).reverse()
    else:
        assert (
            args.name is not None
        )  # If the model is not provided, it means we are using the name
        config = json.load(open(elk_cache_dir() / args.name / "model_config.json", "r"))
        num_layers = config.get("num_layers", config.get("num_hidden_layers"))

    args.layers = normalized_layers(args.layers, num_layers)


def normalized_layers(layers: Optional[list[int]], num_layers: int) -> list[int]:
    layers = layers or list(range(num_layers))
    return [layer if layer >= 0 else num_layers + layer for layer in layers]


def find_missing_layers(args):
    missing_layers = []
    for layer in args.layers:
        cache_dir = elk_cache_dir() / args.name
        train_layer_path = get_hiddens_path(cache_dir, "train", layer)
        validation_layer_path = get_hiddens_path(cache_dir, "validation", layer)
        if not train_layer_path.exists() or not validation_layer_path.exists():
            missing_layers.append(layer)
    return missing_layers


if __name__ == "__main__":
    run()
